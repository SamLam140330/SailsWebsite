<!DOCTYPE html>
<html lang="en">

<head>
  <title>HKBU Event Management System</title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

  <% /* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <% /* <meta name="robots" content="noindex"> */%>

      <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

      <!--STYLES-->
      <link rel="stylesheet" href="/styles/importer.css">
      <!--STYLES END-->
      <link rel="stylesheet" href="https://unpkg.com/buefy/dist/buefy.min.css">
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@mdi/font@5.8.55/css/materialdesignicons.min.css">
</head>

<body>
  <div id="navbarDiv">
    <nav class="navbar" aria-label="main navigation">
      <div class="navbar-brand">
        <b-navbar-item href="http://localhost:1337/">
          <img src="https://raw.githubusercontent.com/buefy/buefy/dev/static/img/buefy-logo.png"
            alt="Lightweight UI components for Vue.js based on Bulma" width="72" height="28">
        </b-navbar-item>
        <a role="button" :class="this.navbarBtnClassName" aria-label="menu" aria-expanded="false"
          @click="onMobileNavbarButtonClicked()">
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
        </a>
      </div>

      <div :class="this.navbarClassName">
        <div class="navbar-start">
          <b-navbar-item href="http://localhost:1337/">
            Home
          </b-navbar-item>
          <b-navbar-item href="http://localhost:1337/events/search">
            Search
          </b-navbar-item>
          <b-navbar-item href="http://localhost:1337/events/create" v-if="isAdmin">
            Create
          </b-navbar-item>
          <b-navbar-item href="http://localhost:1337/events/admin" v-if="isAdmin">
            Admin
          </b-navbar-item>
          <b-navbar-item href="http://localhost:1337/events/registered" v-if="isStudent">
            My Registered Events
          </b-navbar-item>
        </div>

        <div class="navbar-end">
          <b-navbar-item>
            <div class="buttons">
              <a class="button is-primary is-focused" v-if="isLoggedIn">
                <strong>{{ userName }}</strong>
              </a>
              <a class="button is-light" @click="onLogInOutClicked()">
                {{ btnName }}
              </a>
            </div>
          </b-navbar-item>
        </div>
      </div>
    </nav>
  </div>

  <section class="hero is-info">
    <div class="hero-body">
      <p class="title">
        Event Management System
      </p>
      <p class="subtitle">
        HKBU Event Management System is web-based system for department and student societies to broadcast events and
        activities as well as registration.
      </p>
    </div>
  </section>

  <section class="section">
    <%- body %>
  </section>

  <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

  <!--TEMPLATES-->
  <!--TEMPLATES END-->

  <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser
    -->

  <!--
      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript
    -->

  <!--SCRIPTS-->
  <script src="/dependencies/sails.io.js"></script>
  <!--SCRIPTS END-->
  <script defer src="https://use.fontawesome.com/releases/v5.10.0/js/all.js"></script>
  <script src="https://unpkg.com/vue"></script>
  <script src="https://unpkg.com/buefy/dist/buefy.min.js"></script>
  <script>
    new Vue({
      el: '#navbarDiv',
      data: {
        navbarClassName: 'navbar-menu',
        navbarBtnClassName: 'navbar-burger',
        userRole: '<%=req.session.userRole%>',
        userName: '<%=req.session.username%>',
        btnName: 'Login',
      },
      computed: {
        isLoggedIn: function () {
          if (this.userRole === 'admin' || this.userRole === 'student') {
            this.btnName = 'Logout';
            return true;
          } else {
            this.btnName = 'Login';
            return false;
          }
        },
        isAdmin: function () {
          if (this.userRole === 'admin') {
            return true;
          } else {
            return false;
          }
        },
        isStudent: function () {
          if (this.userRole === 'student') {
            return true;
          } else {
            return false;
          }
        },
      },
      methods: {
        onMobileNavbarButtonClicked: function () {
          if (this.navbarClassName === 'navbar-menu') {
            this.navbarClassName = 'navbar-menu is-active';
            this.navbarBtnClassName = 'navbar-burger is-active';
          } else {
            this.navbarClassName = 'navbar-menu';
            this.navbarBtnClassName = 'navbar-burger';
          }
        },
        onLogInOutClicked: async function () {
          if (this.btnName === 'Login') {
            location.replace("http://localhost:1337/user/login")
          } else {
            var response = await fetch('/user/logout', {
              method: 'POST',
            });
            if (response.ok) {
              alert("Logout successfully");
              location.replace("http://localhost:1337")
            } else {
              alert(response.statusText);
            }
          }
        },
      },
    })
  </script>
</body>

</html>